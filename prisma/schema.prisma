// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String
  password  String
  image     String?
  isDeleted Boolean  @default(false)
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

enum Role {
  USER
  ADMIN
}

model Ofert {
  id          String      @id @default(uuid())
  description String
  price       Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
}

model Gastronomic {
  id          String      @id @default(uuid())
  description String
  price       Float
  imagen      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
}

model Desserts {
  id          String      @id @default(uuid())
  description String
  price       Float
  imagen      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
}

model Drinks {
  id        String   @id @default(uuid())
  name      String
  price     Float
  imagen    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Snacks {
  id        String   @id @default(uuid())
  name      String
  price     Float
  imagen    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gallery {
  id          String   @id @default(uuid())
  imagen      String?
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Events {
  id          String   @id @default(uuid())
  imagen      String?
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  totalAmount Float       @default(0)
  pending     Boolean     @default(true)
  createdAt   DateTime    @default(now())
}

model OrderItem {
  id            String       @id @default(uuid())
  orderId       String
  order         Order        @relation(fields: [orderId], references: [id])
  ofertId       String?
  gastronomicId String?
  dessertId     String?
  ofert         Ofert?       @relation(fields: [ofertId], references: [id])
  gastronomic   Gastronomic? @relation(fields: [gastronomicId], references: [id])
  dessert       Desserts?    @relation(fields: [dessertId], references: [id])
  quantity      Int
  price         Float
  createdAt     DateTime     @default(now())
}
